/*
 * Copyright (c) 2020 Daniel Brall
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

{
  parserClass="eu.bradan.purebasic.PureBasicParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="PureBasic"
  psiImplClassSuffix="Impl"
  psiPackage="eu.bradan.purebasic.psi"
  psiImplPackage="eu.bradan.purebasic.psi.impl"

  elementTypeHolderClass="eu.bradan.purebasic.psi.PureBasicTypes"
  elementTypeClass="eu.bradan.purebasic.psi.PureBasicElementType"
  tokenTypeClass="eu.bradan.purebasic.psi.PureBasicTokenType"

  psiImplUtilClass="eu.bradan.purebasic.psi.impl.PureBasicPsiImplUtil"
}

pureBasicFile ::= [sep] statements [sep]

sep ::= SEPARATOR+
private nosep ::= !sep

parse_label_identifier ::= LABEL_IDENTIFIER {
            mixin="eu.bradan.purebasic.psi.impl.PureBasicNamedElementImpl"
            implements="eu.bradan.purebasic.psi.PureBasicNamedElement"
        }
parse_identifier ::= IDENTIFIER {
            mixin="eu.bradan.purebasic.psi.impl.PureBasicNamedElementImpl"
            implements="eu.bradan.purebasic.psi.PureBasicNamedElement"
        }
parse_pointer_identifier ::= POINTER_IDENTIFIER {
            mixin="eu.bradan.purebasic.psi.impl.PureBasicNamedElementImpl"
            implements="eu.bradan.purebasic.psi.PureBasicNamedElement"
        }
parse_constant_identifier ::= CONSTANT_IDENTIFIER {
            mixin="eu.bradan.purebasic.psi.impl.PureBasicNamedElementImpl"
            implements="eu.bradan.purebasic.psi.PureBasicNamedElement"
        }

statement ::= simple_statement|block_statement|INLINE_ASM|COMMENT {recoverWhile=nosep}
block_statement ::= macro|comp_condition|procedure|with|structure|interface|import|datasection|
                    enumeration|declaremodule|definemodule|loop|condition
simple_statement ::= include|includebinary|includepath|usemodule|unusemodule|undefinemacro|swap|runtime|return|restore|
                     read|prototype|macroexpandedcount|goto|gosub|fakereturn|end|enablejs|enableexplicit|enabledebugger|
                     enableasm|disablejs|disableexplicit|disabledebugger|disableasm|debuglevel|debug|continue|break|
                     compilerwarning|compilererror|calldebugger|data_list|procedurereturn|assignment|call|declaration|
                     label

statements ::= statement (sep statement)*

pseudo_types ::= 'p' '-' ('unicode'|'ascii'|'utf8'|'bstr'|'variant')
type_suffix ::= '.' (pseudo_types|[module_path] parse_identifier)

label ::= parse_label_identifier ':'


// Assignment
unary_operators ::= '-'|'!'|'~'|'Not'|'@'|'?'
binary_operators ::= '<='|'=<'|'>='|'=>'|'<>'|'<<'|'>>'|'='|'+'|'-'|'*'|'/'|'&'|'|'|'!'|'~'|'<'|'>'|'%'|'And'|'Or'|'XOr'

assignment ::= ((identifier_or_call_chained|parse_pointer_identifier) [type_suffix]|parse_constant_identifier) ('='|'+'|'-'|'*'|'/') expression

expression ::= '(' expression ')' |
                (identifier_or_call_chained|atom) binary_operators expression |
                 unary_operators expression |
                (identifier_or_call_chained|atom)

module_path_element ::= parse_identifier
module_path ::= ['::'] (module_path_element '::')*
structure_path_element ::= (parse_identifier|parse_pointer_identifier|call)
structure_path ::= ['\'] (structure_path_element '\')*
identifier_chained ::= [module_path] [structure_path] parse_identifier
call_chained ::= [module_path] [structure_path] call
private identifier_or_call_chained ::= call_chained | identifier_chained

atom ::= NUMBER|parse_constant_identifier|parse_identifier|parse_pointer_identifier|CHARACTER|STRING

// Declarations
declaration ::= variable_declaration|array_declaration|list_declaration|map_declaration|procedure_declaration
declaration_scope ::= 'Global'|'Shared'|'Protected'|'Static'|'Threaded'|'Define'

variable_decl_identifier ::= (parse_identifier|parse_pointer_identifier) [type_suffix]
variable_decl_identifier_notype ::= (parse_identifier|parse_pointer_identifier)
variable_decl_list ::= variable_decl_identifier ['=' expression] (',' variable_decl_identifier ['=' expression])*
variable_decl_list_notype ::= variable_decl_identifier_notype (',' variable_decl_identifier_notype)*
variable_declaration ::= declaration_scope type_suffix variable_decl_list_notype|declaration_scope variable_decl_list|variable_decl_identifier

array_declaration ::= [declaration_scope] ('Dim'|'ReDim') parse_identifier [type_suffix] '(' parameters_call ')'
list_declaration ::= [declaration_scope] 'NewList' parse_identifier [type_suffix] '(' ')'
map_declaration ::= [declaration_scope] 'NewMap' parse_identifier [type_suffix] '(' ')'



////////////////////////
// Blocks
////////////////////////

// Procedure
private procedure_decl_pattern ::= [type_suffix] parse_identifier '(' [parameters_decl] ')'
procedure_declaration ::= ('DeclareC'|'Declare') procedure_decl_pattern {pin=1}

procedure ::= procedure_head [sep statements] sep procedure_foot

private parameters_decl_var ::= (parse_identifier|parse_pointer_identifier) [type_suffix]
private parameters_decl_array ::= 'Array' parse_identifier [type_suffix] '(' NUMBER ')' {pin=1}
private parameters_decl_list ::= 'List' parse_identifier [type_suffix] '(' ')' {pin=1}
private parameters_decl_map ::= 'Map' parse_identifier [type_suffix] '(' ')' {pin=1}
parameters_decl ::= (parameters_decl_var | parameters_decl_array | parameters_decl_list | parameters_decl_map) [',' [sep] parameters_decl]
parameters_call ::= expression (',' expression)*

procedure_head ::= ('ProcedureCDLL' | 'ProcedureDLL' | 'ProcedureC' | 'Procedure') procedure_decl_pattern {pin=1 recoverWhile=nosep}
procedurereturn ::= 'ProcedureReturn' [expression]
procedure_foot ::= 'EndProcedure'

// Macro
macro_parameter_decl ::= parse_identifier
macro_parameter_decl_list ::= macro_parameter_decl (',' [sep] macro_parameter_decl)*
private macro_decl_pattern ::= [type_suffix] parse_identifier ['(' [macro_parameter_decl_list] ')']

macro ::= macro_head [sep (statements | expression)] sep macro_foot

macro_head ::= 'Macro' macro_decl_pattern {pin=1 recoverWhile=nosep}
macro_foot ::= 'EndMacro'

// With
with ::= with_head [sep statements] sep with_foot

with_head ::= 'With' identifier_or_call_chained {pin=1 recoverWhile=nosep}
with_foot ::= 'EndWith'


call ::= parse_identifier '(' [parameters_call] ')'

// Structure
structure ::= structure_head [sep (statements|structure_union)] sep structure_foot

structure_head ::= 'Structure' parse_identifier ['Extends' parse_identifier] ['Align' (NUMBER|parse_constant_identifier)] {pin=1 recoverWhile=nosep}
structure_foot ::= 'EndStructure'

structure_union ::= structure_union_head [sep statements] sep structure_union_foot

structure_union_head ::= 'StructureUnion' parse_identifier {pin=1 recoverWhile=nosep}
structure_union_foot ::= 'EndStructureUnion'

// Interface
interface ::= interface_head [sep statements] sep interface_foot

interface_head ::= 'Interface' parse_identifier ['Extends' parse_identifier] {pin=1 recoverWhile=nosep}
interface_foot ::= 'EndInterface'

// Import
import ::= import_head [sep statements] sep import_foot

import_head ::= ('Import'|'ImportC') STRING {pin=1 recoverWhile=nosep}
import_foot ::= 'EndImport'

// DataSection
datasection ::= datasection_head [sep statements] sep datasection_foot

data_entry ::= parse_constant_identifier|NUMBER|STRING
data_list ::= 'Data' [type_suffix] data_entry (',' data_entry)*

datasection_head ::= 'DataSection' {pin=1 recoverWhile=nosep}
datasection_foot ::= 'EndDataSection'

// DeclareModule
declaremodule ::= declaremodule_head [sep statements] sep declaremodule_foot

declaremodule_head ::= 'DeclareModule' parse_identifier {pin=1 recoverWhile=nosep}
declaremodule_foot ::= 'EndDeclareModule'

// Module
definemodule ::= definemodule_head [sep statements] sep definemodule_foot

definemodule_head ::= 'Module' parse_identifier {pin=1 recoverWhile=nosep}
definemodule_foot ::= 'EndModule'

// Enumeration
enumeration ::= enumeration_head [sep statements] sep enumeration_foot

enumeration_head ::= ('Enumeration' | 'EnumerationBinary') {pin=1 recoverWhile=nosep}
enumeration_foot ::= 'EndEnumeration'


// Loops
private while ::= while_head [sep statements] sep while_foot
private while_head ::= 'While' expression {pin=1 recoverWhile=nosep}
private while_foot ::= 'Wend'
private for ::= for_head [sep statements] sep for_foot
private for_head ::= 'For' variable_decl_identifier '=' expression 'To' expression ['Step' NUMBER] {pin=1 recoverWhile=nosep}
private for_foot ::= 'Next' [parse_identifier]
private foreach ::= foreach_head [sep statements] sep foreach_foot
private foreach_head ::= 'ForEach' identifier_or_call_chained {pin=1 recoverWhile=nosep}
private foreach_foot ::= 'Next'
private repeat ::= 'Repeat' [sep statements] sep ('Until' expression | 'ForEver') {pin=1}

loop ::= while|for|foreach|repeat

// Conditional
private condition_if ::= 'If' expression [sep statements] {pin=1}
private condition_elseif ::= 'ElseIf' expression [sep statements] {pin=1}
private condition_else ::= 'Else' [sep statements] {pin=1}
private condition_endif ::= 'EndIf'

private condition_case ::= ('Case' expression|'Default') [sep statements]
private condition_select ::= 'Select' expression (sep condition_case)* sep 'EndSelect' {pin=1}

condition ::= condition_if (sep condition_elseif)* [sep condition_else] sep condition_endif | condition_select

// Compiler Conditional
private comp_condition_if ::= 'CompilerIf' expression [sep statements] {pin=1}
private comp_condition_elseif ::= 'CompilerElseIf' expression [sep statements] {pin=1}
private comp_condition_else ::= 'CompilerElse' [sep statements] {pin=1}
private comp_condition_endif ::= 'CompilerEndIf'

private comp_condition_case ::= ('CompilerCase' expression|'CompilerDefault') [sep statements] {pin=1}
private comp_condition_select ::= 'CompilerSelect' expression (sep comp_condition_case)* sep 'CompilerEndSelect' {pin=1}

comp_condition ::= comp_condition_if (sep comp_condition_elseif)* [sep comp_condition_else] sep comp_condition_endif |
                   comp_condition_select

////////////////////////
// Simple Statements
////////////////////////

include ::= ('XIncludeFile'|'IncludeFile') STRING
includebinary ::= 'IncludeBinary' STRING
includepath ::= 'IncludePath' STRING
usemodule ::= 'UseModule' parse_identifier {pin=1}
unusemodule ::= 'UnuseModule' parse_identifier {pin=1}
undefinemacro ::= 'UndefineMacro' parse_identifier {pin=1}
swap ::= 'Swap' identifier_or_call_chained ',' identifier_or_call_chained {pin=1}
runtime ::= 'Runtime' (parse_constant_identifier|parse_identifier|parse_pointer_identifier|procedure|enumeration) {pin=1}
return ::= 'Return'
restore ::= 'Restore' parse_identifier {pin=1}
read ::= 'Read' [type_suffix] parse_identifier {pin=1}
prototype ::= ('PrototypeC'|'Prototype') procedure_decl_pattern {pin=1}
macroexpandedcount ::= 'MacroExpandedCount'
goto ::= 'Goto' parse_identifier {pin=1}
gosub ::= 'Gosub' parse_identifier {pin=1}
fakereturn ::= 'FakeReturn'
end ::= 'End' expression {pin=1}
enablejs ::= 'EnableJS'
enableexplicit ::= 'EnableExplicit'
enabledebugger ::= 'EnableDebugger'
enableasm ::= 'EnableASM'
disablejs ::= 'DisableJS'
disableexplicit ::= 'DisableExplicit'
disabledebugger ::= 'DisableDebugger'
disableasm ::= 'DisableASM'
debuglevel ::= 'DebugLevel' (parse_constant_identifier|NUMBER) {pin=1}
debug ::= 'Debug' expression [',' (parse_constant_identifier|NUMBER)] {pin=1}
continue ::= 'Continue'
break ::= 'Break'
compilerwarning ::= 'CompilerWarning' (parse_constant_identifier|STRING) {pin=1}
compilererror ::= 'CompilerError' (parse_constant_identifier|STRING) {pin=1}
calldebugger ::= 'CallDebugger'

////////////////////////
// Misc
////////////////////////

private leftTokens ::= KEYWORD|OPERATOR
// private tokenTypes_ ::= COMMENT|KEYWORD|OPERATOR|STRING|CHARACTER|CONSTANT_IDENTIFIER|NUMBER|IDENTIFIER|POINTER_IDENTIFIER
